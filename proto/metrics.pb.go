// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.32.1
// source: metrics.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// DatabaseInfo contains metadata about the database
type DatabaseInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Database Identity
	DatabaseId   string `protobuf:"bytes,1,opt,name=database_id,json=databaseId,proto3" json:"database_id,omitempty"`
	DatabaseName string `protobuf:"bytes,2,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"`
	DatabaseType string `protobuf:"bytes,3,opt,name=database_type,json=databaseType,proto3" json:"database_type,omitempty"`
	Version      string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Host         string `protobuf:"bytes,5,opt,name=host,proto3" json:"host,omitempty"`
	// Config
	MaxConnections           int32 `protobuf:"varint,10,opt,name=max_connections,json=maxConnections,proto3" json:"max_connections,omitempty"`
	ConnectionPoolingEnabled bool  `protobuf:"varint,11,opt,name=connection_pooling_enabled,json=connectionPoolingEnabled,proto3" json:"connection_pooling_enabled,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *DatabaseInfo) Reset() {
	*x = DatabaseInfo{}
	mi := &file_metrics_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseInfo) ProtoMessage() {}

func (x *DatabaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseInfo.ProtoReflect.Descriptor instead.
func (*DatabaseInfo) Descriptor() ([]byte, []int) {
	return file_metrics_proto_rawDescGZIP(), []int{0}
}

func (x *DatabaseInfo) GetDatabaseId() string {
	if x != nil {
		return x.DatabaseId
	}
	return ""
}

func (x *DatabaseInfo) GetDatabaseName() string {
	if x != nil {
		return x.DatabaseName
	}
	return ""
}

func (x *DatabaseInfo) GetDatabaseType() string {
	if x != nil {
		return x.DatabaseType
	}
	return ""
}

func (x *DatabaseInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *DatabaseInfo) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *DatabaseInfo) GetMaxConnections() int32 {
	if x != nil {
		return x.MaxConnections
	}
	return 0
}

func (x *DatabaseInfo) GetConnectionPoolingEnabled() bool {
	if x != nil {
		return x.ConnectionPoolingEnabled
	}
	return false
}

// MetricSnapshot is the normalized metric data sent to Analyser
// Contains health scores (0.0-1.0) and raw measurements
type MetricSnapshot struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// === Metadata ===
	DatabaseId   string `protobuf:"bytes,1,opt,name=database_id,json=databaseId,proto3" json:"database_id,omitempty"`
	DatabaseType string `protobuf:"bytes,2,opt,name=database_type,json=databaseType,proto3" json:"database_type,omitempty"`
	Timestamp    int64  `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// === Normalized Health Scores (0.0 - 1.0) ===
	HealthScore      float64 `protobuf:"fixed64,10,opt,name=health_score,json=healthScore,proto3" json:"health_score,omitempty"`
	ConnectionHealth float64 `protobuf:"fixed64,11,opt,name=connection_health,json=connectionHealth,proto3" json:"connection_health,omitempty"`
	QueryHealth      float64 `protobuf:"fixed64,12,opt,name=query_health,json=queryHealth,proto3" json:"query_health,omitempty"`
	StorageHealth    float64 `protobuf:"fixed64,13,opt,name=storage_health,json=storageHealth,proto3" json:"storage_health,omitempty"`
	CacheHealth      float64 `protobuf:"fixed64,14,opt,name=cache_health,json=cacheHealth,proto3" json:"cache_health,omitempty"`
	// === Context ===
	AvailableMetrics []string `protobuf:"bytes,20,rep,name=available_metrics,json=availableMetrics,proto3" json:"available_metrics,omitempty"`
	// === Raw Measurements (for Analyser to inspect) ===
	Measurements *Measurements `protobuf:"bytes,30,opt,name=measurements,proto3" json:"measurements,omitempty"`
	// === Optional: Pass-through ===
	ExtendedMetrics map[string]float64 `protobuf:"bytes,40,rep,name=extended_metrics,json=extendedMetrics,proto3" json:"extended_metrics,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *MetricSnapshot) Reset() {
	*x = MetricSnapshot{}
	mi := &file_metrics_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricSnapshot) ProtoMessage() {}

func (x *MetricSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricSnapshot.ProtoReflect.Descriptor instead.
func (*MetricSnapshot) Descriptor() ([]byte, []int) {
	return file_metrics_proto_rawDescGZIP(), []int{1}
}

func (x *MetricSnapshot) GetDatabaseId() string {
	if x != nil {
		return x.DatabaseId
	}
	return ""
}

func (x *MetricSnapshot) GetDatabaseType() string {
	if x != nil {
		return x.DatabaseType
	}
	return ""
}

func (x *MetricSnapshot) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *MetricSnapshot) GetHealthScore() float64 {
	if x != nil {
		return x.HealthScore
	}
	return 0
}

func (x *MetricSnapshot) GetConnectionHealth() float64 {
	if x != nil {
		return x.ConnectionHealth
	}
	return 0
}

func (x *MetricSnapshot) GetQueryHealth() float64 {
	if x != nil {
		return x.QueryHealth
	}
	return 0
}

func (x *MetricSnapshot) GetStorageHealth() float64 {
	if x != nil {
		return x.StorageHealth
	}
	return 0
}

func (x *MetricSnapshot) GetCacheHealth() float64 {
	if x != nil {
		return x.CacheHealth
	}
	return 0
}

func (x *MetricSnapshot) GetAvailableMetrics() []string {
	if x != nil {
		return x.AvailableMetrics
	}
	return nil
}

func (x *MetricSnapshot) GetMeasurements() *Measurements {
	if x != nil {
		return x.Measurements
	}
	return nil
}

func (x *MetricSnapshot) GetExtendedMetrics() map[string]float64 {
	if x != nil {
		return x.ExtendedMetrics
	}
	return nil
}

// Measurements contains raw values for Analyser to detect anomalies
type Measurements struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Connections
	ActiveConnections  *int32 `protobuf:"varint,1,opt,name=active_connections,json=activeConnections,proto3,oneof" json:"active_connections,omitempty"`
	IdleConnections    *int32 `protobuf:"varint,2,opt,name=idle_connections,json=idleConnections,proto3,oneof" json:"idle_connections,omitempty"`
	MaxConnections     *int32 `protobuf:"varint,3,opt,name=max_connections,json=maxConnections,proto3,oneof" json:"max_connections,omitempty"`
	WaitingConnections *int32 `protobuf:"varint,4,opt,name=waiting_connections,json=waitingConnections,proto3,oneof" json:"waiting_connections,omitempty"`
	// Queries
	AvgQueryLatencyMs *float64 `protobuf:"fixed64,10,opt,name=avg_query_latency_ms,json=avgQueryLatencyMs,proto3,oneof" json:"avg_query_latency_ms,omitempty"`
	P50QueryLatencyMs *float64 `protobuf:"fixed64,11,opt,name=p50_query_latency_ms,json=p50QueryLatencyMs,proto3,oneof" json:"p50_query_latency_ms,omitempty"`
	P95QueryLatencyMs *float64 `protobuf:"fixed64,12,opt,name=p95_query_latency_ms,json=p95QueryLatencyMs,proto3,oneof" json:"p95_query_latency_ms,omitempty"`
	P99QueryLatencyMs *float64 `protobuf:"fixed64,13,opt,name=p99_query_latency_ms,json=p99QueryLatencyMs,proto3,oneof" json:"p99_query_latency_ms,omitempty"`
	SlowQueryCount    *int32   `protobuf:"varint,14,opt,name=slow_query_count,json=slowQueryCount,proto3,oneof" json:"slow_query_count,omitempty"`
	SequentialScans   *int32   `protobuf:"varint,15,opt,name=sequential_scans,json=sequentialScans,proto3,oneof" json:"sequential_scans,omitempty"`
	// Storage
	UsedStorageBytes  *int64 `protobuf:"varint,20,opt,name=used_storage_bytes,json=usedStorageBytes,proto3,oneof" json:"used_storage_bytes,omitempty"`
	TotalStorageBytes *int64 `protobuf:"varint,21,opt,name=total_storage_bytes,json=totalStorageBytes,proto3,oneof" json:"total_storage_bytes,omitempty"`
	FreeStorageBytes  *int64 `protobuf:"varint,22,opt,name=free_storage_bytes,json=freeStorageBytes,proto3,oneof" json:"free_storage_bytes,omitempty"`
	// Cache
	CacheHitRate   *float64 `protobuf:"fixed64,30,opt,name=cache_hit_rate,json=cacheHitRate,proto3,oneof" json:"cache_hit_rate,omitempty"`
	CacheHitCount  *int64   `protobuf:"varint,31,opt,name=cache_hit_count,json=cacheHitCount,proto3,oneof" json:"cache_hit_count,omitempty"`
	CacheMissCount *int64   `protobuf:"varint,32,opt,name=cache_miss_count,json=cacheMissCount,proto3,oneof" json:"cache_miss_count,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Measurements) Reset() {
	*x = Measurements{}
	mi := &file_metrics_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Measurements) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Measurements) ProtoMessage() {}

func (x *Measurements) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Measurements.ProtoReflect.Descriptor instead.
func (*Measurements) Descriptor() ([]byte, []int) {
	return file_metrics_proto_rawDescGZIP(), []int{2}
}

func (x *Measurements) GetActiveConnections() int32 {
	if x != nil && x.ActiveConnections != nil {
		return *x.ActiveConnections
	}
	return 0
}

func (x *Measurements) GetIdleConnections() int32 {
	if x != nil && x.IdleConnections != nil {
		return *x.IdleConnections
	}
	return 0
}

func (x *Measurements) GetMaxConnections() int32 {
	if x != nil && x.MaxConnections != nil {
		return *x.MaxConnections
	}
	return 0
}

func (x *Measurements) GetWaitingConnections() int32 {
	if x != nil && x.WaitingConnections != nil {
		return *x.WaitingConnections
	}
	return 0
}

func (x *Measurements) GetAvgQueryLatencyMs() float64 {
	if x != nil && x.AvgQueryLatencyMs != nil {
		return *x.AvgQueryLatencyMs
	}
	return 0
}

func (x *Measurements) GetP50QueryLatencyMs() float64 {
	if x != nil && x.P50QueryLatencyMs != nil {
		return *x.P50QueryLatencyMs
	}
	return 0
}

func (x *Measurements) GetP95QueryLatencyMs() float64 {
	if x != nil && x.P95QueryLatencyMs != nil {
		return *x.P95QueryLatencyMs
	}
	return 0
}

func (x *Measurements) GetP99QueryLatencyMs() float64 {
	if x != nil && x.P99QueryLatencyMs != nil {
		return *x.P99QueryLatencyMs
	}
	return 0
}

func (x *Measurements) GetSlowQueryCount() int32 {
	if x != nil && x.SlowQueryCount != nil {
		return *x.SlowQueryCount
	}
	return 0
}

func (x *Measurements) GetSequentialScans() int32 {
	if x != nil && x.SequentialScans != nil {
		return *x.SequentialScans
	}
	return 0
}

func (x *Measurements) GetUsedStorageBytes() int64 {
	if x != nil && x.UsedStorageBytes != nil {
		return *x.UsedStorageBytes
	}
	return 0
}

func (x *Measurements) GetTotalStorageBytes() int64 {
	if x != nil && x.TotalStorageBytes != nil {
		return *x.TotalStorageBytes
	}
	return 0
}

func (x *Measurements) GetFreeStorageBytes() int64 {
	if x != nil && x.FreeStorageBytes != nil {
		return *x.FreeStorageBytes
	}
	return 0
}

func (x *Measurements) GetCacheHitRate() float64 {
	if x != nil && x.CacheHitRate != nil {
		return *x.CacheHitRate
	}
	return 0
}

func (x *Measurements) GetCacheHitCount() int64 {
	if x != nil && x.CacheHitCount != nil {
		return *x.CacheHitCount
	}
	return 0
}

func (x *Measurements) GetCacheMissCount() int64 {
	if x != nil && x.CacheMissCount != nil {
		return *x.CacheMissCount
	}
	return 0
}

// Acknowledge database registration
type RegistrationAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	AssignedId    string                 `protobuf:"bytes,3,opt,name=assigned_id,json=assignedId,proto3" json:"assigned_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegistrationAck) Reset() {
	*x = RegistrationAck{}
	mi := &file_metrics_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegistrationAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistrationAck) ProtoMessage() {}

func (x *RegistrationAck) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistrationAck.ProtoReflect.Descriptor instead.
func (*RegistrationAck) Descriptor() ([]byte, []int) {
	return file_metrics_proto_rawDescGZIP(), []int{3}
}

func (x *RegistrationAck) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RegistrationAck) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RegistrationAck) GetAssignedId() string {
	if x != nil {
		return x.AssignedId
	}
	return ""
}

// Acknowledge metrics received
type MetricsAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TotalMetrics  int64                  `protobuf:"varint,1,opt,name=total_metrics,json=totalMetrics,proto3" json:"total_metrics,omitempty"`
	Status        string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MetricsAck) Reset() {
	*x = MetricsAck{}
	mi := &file_metrics_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricsAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsAck) ProtoMessage() {}

func (x *MetricsAck) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsAck.ProtoReflect.Descriptor instead.
func (*MetricsAck) Descriptor() ([]byte, []int) {
	return file_metrics_proto_rawDescGZIP(), []int{4}
}

func (x *MetricsAck) GetTotalMetrics() int64 {
	if x != nil {
		return x.TotalMetrics
	}
	return 0
}

func (x *MetricsAck) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

var File_metrics_proto protoreflect.FileDescriptor

const file_metrics_proto_rawDesc = "" +
	"\n" +
	"\rmetrics.proto\x12\x05proto\"\x8e\x02\n" +
	"\fDatabaseInfo\x12\x1f\n" +
	"\vdatabase_id\x18\x01 \x01(\tR\n" +
	"databaseId\x12#\n" +
	"\rdatabase_name\x18\x02 \x01(\tR\fdatabaseName\x12#\n" +
	"\rdatabase_type\x18\x03 \x01(\tR\fdatabaseType\x12\x18\n" +
	"\aversion\x18\x04 \x01(\tR\aversion\x12\x12\n" +
	"\x04host\x18\x05 \x01(\tR\x04host\x12'\n" +
	"\x0fmax_connections\x18\n" +
	" \x01(\x05R\x0emaxConnections\x12<\n" +
	"\x1aconnection_pooling_enabled\x18\v \x01(\bR\x18connectionPoolingEnabled\"\xb2\x04\n" +
	"\x0eMetricSnapshot\x12\x1f\n" +
	"\vdatabase_id\x18\x01 \x01(\tR\n" +
	"databaseId\x12#\n" +
	"\rdatabase_type\x18\x02 \x01(\tR\fdatabaseType\x12\x1c\n" +
	"\ttimestamp\x18\x03 \x01(\x03R\ttimestamp\x12!\n" +
	"\fhealth_score\x18\n" +
	" \x01(\x01R\vhealthScore\x12+\n" +
	"\x11connection_health\x18\v \x01(\x01R\x10connectionHealth\x12!\n" +
	"\fquery_health\x18\f \x01(\x01R\vqueryHealth\x12%\n" +
	"\x0estorage_health\x18\r \x01(\x01R\rstorageHealth\x12!\n" +
	"\fcache_health\x18\x0e \x01(\x01R\vcacheHealth\x12+\n" +
	"\x11available_metrics\x18\x14 \x03(\tR\x10availableMetrics\x127\n" +
	"\fmeasurements\x18\x1e \x01(\v2\x13.proto.MeasurementsR\fmeasurements\x12U\n" +
	"\x10extended_metrics\x18( \x03(\v2*.proto.MetricSnapshot.ExtendedMetricsEntryR\x0fextendedMetrics\x1aB\n" +
	"\x14ExtendedMetricsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x01R\x05value:\x028\x01\"\x97\t\n" +
	"\fMeasurements\x122\n" +
	"\x12active_connections\x18\x01 \x01(\x05H\x00R\x11activeConnections\x88\x01\x01\x12.\n" +
	"\x10idle_connections\x18\x02 \x01(\x05H\x01R\x0fidleConnections\x88\x01\x01\x12,\n" +
	"\x0fmax_connections\x18\x03 \x01(\x05H\x02R\x0emaxConnections\x88\x01\x01\x124\n" +
	"\x13waiting_connections\x18\x04 \x01(\x05H\x03R\x12waitingConnections\x88\x01\x01\x124\n" +
	"\x14avg_query_latency_ms\x18\n" +
	" \x01(\x01H\x04R\x11avgQueryLatencyMs\x88\x01\x01\x124\n" +
	"\x14p50_query_latency_ms\x18\v \x01(\x01H\x05R\x11p50QueryLatencyMs\x88\x01\x01\x124\n" +
	"\x14p95_query_latency_ms\x18\f \x01(\x01H\x06R\x11p95QueryLatencyMs\x88\x01\x01\x124\n" +
	"\x14p99_query_latency_ms\x18\r \x01(\x01H\aR\x11p99QueryLatencyMs\x88\x01\x01\x12-\n" +
	"\x10slow_query_count\x18\x0e \x01(\x05H\bR\x0eslowQueryCount\x88\x01\x01\x12.\n" +
	"\x10sequential_scans\x18\x0f \x01(\x05H\tR\x0fsequentialScans\x88\x01\x01\x121\n" +
	"\x12used_storage_bytes\x18\x14 \x01(\x03H\n" +
	"R\x10usedStorageBytes\x88\x01\x01\x123\n" +
	"\x13total_storage_bytes\x18\x15 \x01(\x03H\vR\x11totalStorageBytes\x88\x01\x01\x121\n" +
	"\x12free_storage_bytes\x18\x16 \x01(\x03H\fR\x10freeStorageBytes\x88\x01\x01\x12)\n" +
	"\x0ecache_hit_rate\x18\x1e \x01(\x01H\rR\fcacheHitRate\x88\x01\x01\x12+\n" +
	"\x0fcache_hit_count\x18\x1f \x01(\x03H\x0eR\rcacheHitCount\x88\x01\x01\x12-\n" +
	"\x10cache_miss_count\x18  \x01(\x03H\x0fR\x0ecacheMissCount\x88\x01\x01B\x15\n" +
	"\x13_active_connectionsB\x13\n" +
	"\x11_idle_connectionsB\x12\n" +
	"\x10_max_connectionsB\x16\n" +
	"\x14_waiting_connectionsB\x17\n" +
	"\x15_avg_query_latency_msB\x17\n" +
	"\x15_p50_query_latency_msB\x17\n" +
	"\x15_p95_query_latency_msB\x17\n" +
	"\x15_p99_query_latency_msB\x13\n" +
	"\x11_slow_query_countB\x13\n" +
	"\x11_sequential_scansB\x15\n" +
	"\x13_used_storage_bytesB\x16\n" +
	"\x14_total_storage_bytesB\x15\n" +
	"\x13_free_storage_bytesB\x11\n" +
	"\x0f_cache_hit_rateB\x12\n" +
	"\x10_cache_hit_countB\x13\n" +
	"\x11_cache_miss_count\"f\n" +
	"\x0fRegistrationAck\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x1f\n" +
	"\vassigned_id\x18\x03 \x01(\tR\n" +
	"assignedId\"I\n" +
	"\n" +
	"MetricsAck\x12#\n" +
	"\rtotal_metrics\x18\x01 \x01(\x03R\ftotalMetrics\x12\x16\n" +
	"\x06status\x18\x02 \x01(\tR\x06status2\x8e\x01\n" +
	"\x0eMetricsService\x12?\n" +
	"\x10RegisterDatabase\x12\x13.proto.DatabaseInfo\x1a\x16.proto.RegistrationAck\x12;\n" +
	"\rStreamMetrics\x12\x15.proto.MetricSnapshot\x1a\x11.proto.MetricsAck(\x01B3Z1github.com/EricMurray-e-m-dev/StartupMonkey/protob\x06proto3"

var (
	file_metrics_proto_rawDescOnce sync.Once
	file_metrics_proto_rawDescData []byte
)

func file_metrics_proto_rawDescGZIP() []byte {
	file_metrics_proto_rawDescOnce.Do(func() {
		file_metrics_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_metrics_proto_rawDesc), len(file_metrics_proto_rawDesc)))
	})
	return file_metrics_proto_rawDescData
}

var file_metrics_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_metrics_proto_goTypes = []any{
	(*DatabaseInfo)(nil),    // 0: proto.DatabaseInfo
	(*MetricSnapshot)(nil),  // 1: proto.MetricSnapshot
	(*Measurements)(nil),    // 2: proto.Measurements
	(*RegistrationAck)(nil), // 3: proto.RegistrationAck
	(*MetricsAck)(nil),      // 4: proto.MetricsAck
	nil,                     // 5: proto.MetricSnapshot.ExtendedMetricsEntry
}
var file_metrics_proto_depIdxs = []int32{
	2, // 0: proto.MetricSnapshot.measurements:type_name -> proto.Measurements
	5, // 1: proto.MetricSnapshot.extended_metrics:type_name -> proto.MetricSnapshot.ExtendedMetricsEntry
	0, // 2: proto.MetricsService.RegisterDatabase:input_type -> proto.DatabaseInfo
	1, // 3: proto.MetricsService.StreamMetrics:input_type -> proto.MetricSnapshot
	3, // 4: proto.MetricsService.RegisterDatabase:output_type -> proto.RegistrationAck
	4, // 5: proto.MetricsService.StreamMetrics:output_type -> proto.MetricsAck
	4, // [4:6] is the sub-list for method output_type
	2, // [2:4] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_metrics_proto_init() }
func file_metrics_proto_init() {
	if File_metrics_proto != nil {
		return
	}
	file_metrics_proto_msgTypes[2].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_metrics_proto_rawDesc), len(file_metrics_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_metrics_proto_goTypes,
		DependencyIndexes: file_metrics_proto_depIdxs,
		MessageInfos:      file_metrics_proto_msgTypes,
	}.Build()
	File_metrics_proto = out.File
	file_metrics_proto_goTypes = nil
	file_metrics_proto_depIdxs = nil
}
