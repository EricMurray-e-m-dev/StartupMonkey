// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.32.1
// source: metrics.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// DatabaseInfo contains metadata about the database
type DatabaseInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Database Identity: 1-9
	DatabaseId   string `protobuf:"bytes,1,opt,name=database_id,json=databaseId,proto3" json:"database_id,omitempty"`       // Database ID
	DatabaseName string `protobuf:"bytes,2,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"` // Database name
	DatabaseType string `protobuf:"bytes,3,opt,name=database_type,json=databaseType,proto3" json:"database_type,omitempty"` // DB Type
	Version      string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`                               // Version
	Host         string `protobuf:"bytes,5,opt,name=host,proto3" json:"host,omitempty"`                                     // Host DB - Multi DB setup
	// Config: 10-19
	MaxConnections           int32 `protobuf:"varint,10,opt,name=max_connections,json=maxConnections,proto3" json:"max_connections,omitempty"`                                 // Max connections
	ConnectionPoolingEnabled bool  `protobuf:"varint,11,opt,name=connection_pooling_enabled,json=connectionPoolingEnabled,proto3" json:"connection_pooling_enabled,omitempty"` // Is Pooling active
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *DatabaseInfo) Reset() {
	*x = DatabaseInfo{}
	mi := &file_metrics_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseInfo) ProtoMessage() {}

func (x *DatabaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseInfo.ProtoReflect.Descriptor instead.
func (*DatabaseInfo) Descriptor() ([]byte, []int) {
	return file_metrics_proto_rawDescGZIP(), []int{0}
}

func (x *DatabaseInfo) GetDatabaseId() string {
	if x != nil {
		return x.DatabaseId
	}
	return ""
}

func (x *DatabaseInfo) GetDatabaseName() string {
	if x != nil {
		return x.DatabaseName
	}
	return ""
}

func (x *DatabaseInfo) GetDatabaseType() string {
	if x != nil {
		return x.DatabaseType
	}
	return ""
}

func (x *DatabaseInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *DatabaseInfo) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *DatabaseInfo) GetMaxConnections() int32 {
	if x != nil {
		return x.MaxConnections
	}
	return 0
}

func (x *DatabaseInfo) GetConnectionPoolingEnabled() bool {
	if x != nil {
		return x.ConnectionPoolingEnabled
	}
	return false
}

// MetricsSnapshot is a point in time snapshot of state
type MetricsSnapshot struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Metadata: 1-9
	DatabaseId   string `protobuf:"bytes,1,opt,name=database_id,json=databaseId,proto3" json:"database_id,omitempty"`       // Source database
	Timestamp    int64  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                          // Timestamp
	DatabaseType string `protobuf:"bytes,3,opt,name=database_type,json=databaseType,proto3" json:"database_type,omitempty"` // DB Type - "postgresql", "mongodb", "sqlite"...
	// System Metrics: 10-19
	CpuPercent          float64 `protobuf:"fixed64,10,opt,name=cpu_percent,json=cpuPercent,proto3" json:"cpu_percent,omitempty"`                                    // Measure system CPU usage
	MemoryPercent       float64 `protobuf:"fixed64,11,opt,name=memory_percent,json=memoryPercent,proto3" json:"memory_percent,omitempty"`                           // Measure memory usage
	DiskIoReadMbPerSec  float64 `protobuf:"fixed64,12,opt,name=disk_io_read_mb_per_sec,json=diskIoReadMbPerSec,proto3" json:"disk_io_read_mb_per_sec,omitempty"`    // Read stats per sec
	DiskIoWriteMbPerSec float64 `protobuf:"fixed64,13,opt,name=disk_io_write_mb_per_sec,json=diskIoWriteMbPerSec,proto3" json:"disk_io_write_mb_per_sec,omitempty"` // Write stats per sec
	// Connection Metrics: 20-29
	ActiveConnections    int32   `protobuf:"varint,20,opt,name=active_connections,json=activeConnections,proto3" json:"active_connections,omitempty"`               // Total connections established to DB
	IdleConnections      int32   `protobuf:"varint,21,opt,name=idle_connections,json=idleConnections,proto3" json:"idle_connections,omitempty"`                     // Idling connections
	MaxConnections       int32   `protobuf:"varint,22,opt,name=max_connections,json=maxConnections,proto3" json:"max_connections,omitempty"`                        // Connections limit
	ConnectionWaitTimeMs float64 `protobuf:"fixed64,23,opt,name=connection_wait_time_ms,json=connectionWaitTimeMs,proto3" json:"connection_wait_time_ms,omitempty"` // Avg time waiting for connection (0 = no wait)
	// Query Performance: 30-39
	QueryLatencyP50Ms float64 `protobuf:"fixed64,30,opt,name=query_latency_p50_ms,json=queryLatencyP50Ms,proto3" json:"query_latency_p50_ms,omitempty"` // 50pct Queries faster than this
	QueryLatencyP95Ms float64 `protobuf:"fixed64,31,opt,name=query_latency_p95_ms,json=queryLatencyP95Ms,proto3" json:"query_latency_p95_ms,omitempty"` // 95pct Queries faster than this
	QueryLatencyP99Ms float64 `protobuf:"fixed64,32,opt,name=query_latency_p99_ms,json=queryLatencyP99Ms,proto3" json:"query_latency_p99_ms,omitempty"` // 99pct Queries faster than this
	QueriesPerSecond  float64 `protobuf:"fixed64,33,opt,name=queries_per_second,json=queriesPerSecond,proto3" json:"queries_per_second,omitempty"`      // Throughput
	// Cache Metrics: 40-49
	CacheHitRate float64 `protobuf:"fixed64,40,opt,name=cache_hit_rate,json=cacheHitRate,proto3" json:"cache_hit_rate,omitempty"` // Cache ratio 0.00 - 1.00
	CacheSizeMb  float64 `protobuf:"fixed64,41,opt,name=cache_size_mb,json=cacheSizeMb,proto3" json:"cache_size_mb,omitempty"`    // Cache size
	// Errors: 50-59
	ErrorsPerSecond float64 `protobuf:"fixed64,50,opt,name=errors_per_second,json=errorsPerSecond,proto3" json:"errors_per_second,omitempty"` // Error rate
	// Extensible Metrics: 60-99
	ExtendedMetrics map[string]float64 `protobuf:"bytes,60,rep,name=extended_metrics,json=extendedMetrics,proto3" json:"extended_metrics,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"` // DB specific metrics
	Labels          map[string]string  `protobuf:"bytes,61,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`                                            // Non-numeric metrics
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *MetricsSnapshot) Reset() {
	*x = MetricsSnapshot{}
	mi := &file_metrics_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricsSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsSnapshot) ProtoMessage() {}

func (x *MetricsSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsSnapshot.ProtoReflect.Descriptor instead.
func (*MetricsSnapshot) Descriptor() ([]byte, []int) {
	return file_metrics_proto_rawDescGZIP(), []int{1}
}

func (x *MetricsSnapshot) GetDatabaseId() string {
	if x != nil {
		return x.DatabaseId
	}
	return ""
}

func (x *MetricsSnapshot) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *MetricsSnapshot) GetDatabaseType() string {
	if x != nil {
		return x.DatabaseType
	}
	return ""
}

func (x *MetricsSnapshot) GetCpuPercent() float64 {
	if x != nil {
		return x.CpuPercent
	}
	return 0
}

func (x *MetricsSnapshot) GetMemoryPercent() float64 {
	if x != nil {
		return x.MemoryPercent
	}
	return 0
}

func (x *MetricsSnapshot) GetDiskIoReadMbPerSec() float64 {
	if x != nil {
		return x.DiskIoReadMbPerSec
	}
	return 0
}

func (x *MetricsSnapshot) GetDiskIoWriteMbPerSec() float64 {
	if x != nil {
		return x.DiskIoWriteMbPerSec
	}
	return 0
}

func (x *MetricsSnapshot) GetActiveConnections() int32 {
	if x != nil {
		return x.ActiveConnections
	}
	return 0
}

func (x *MetricsSnapshot) GetIdleConnections() int32 {
	if x != nil {
		return x.IdleConnections
	}
	return 0
}

func (x *MetricsSnapshot) GetMaxConnections() int32 {
	if x != nil {
		return x.MaxConnections
	}
	return 0
}

func (x *MetricsSnapshot) GetConnectionWaitTimeMs() float64 {
	if x != nil {
		return x.ConnectionWaitTimeMs
	}
	return 0
}

func (x *MetricsSnapshot) GetQueryLatencyP50Ms() float64 {
	if x != nil {
		return x.QueryLatencyP50Ms
	}
	return 0
}

func (x *MetricsSnapshot) GetQueryLatencyP95Ms() float64 {
	if x != nil {
		return x.QueryLatencyP95Ms
	}
	return 0
}

func (x *MetricsSnapshot) GetQueryLatencyP99Ms() float64 {
	if x != nil {
		return x.QueryLatencyP99Ms
	}
	return 0
}

func (x *MetricsSnapshot) GetQueriesPerSecond() float64 {
	if x != nil {
		return x.QueriesPerSecond
	}
	return 0
}

func (x *MetricsSnapshot) GetCacheHitRate() float64 {
	if x != nil {
		return x.CacheHitRate
	}
	return 0
}

func (x *MetricsSnapshot) GetCacheSizeMb() float64 {
	if x != nil {
		return x.CacheSizeMb
	}
	return 0
}

func (x *MetricsSnapshot) GetErrorsPerSecond() float64 {
	if x != nil {
		return x.ErrorsPerSecond
	}
	return 0
}

func (x *MetricsSnapshot) GetExtendedMetrics() map[string]float64 {
	if x != nil {
		return x.ExtendedMetrics
	}
	return nil
}

func (x *MetricsSnapshot) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

// Acknowledge DB Registration
type RegistrationAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`                        // Register succeeded (true) or failed (false)
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                         // Context message
	AssignedId    string                 `protobuf:"bytes,3,opt,name=assigned_id,json=assignedId,proto3" json:"assigned_id,omitempty"` // Analyser ID assigned to metric
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegistrationAck) Reset() {
	*x = RegistrationAck{}
	mi := &file_metrics_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegistrationAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistrationAck) ProtoMessage() {}

func (x *RegistrationAck) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistrationAck.ProtoReflect.Descriptor instead.
func (*RegistrationAck) Descriptor() ([]byte, []int) {
	return file_metrics_proto_rawDescGZIP(), []int{2}
}

func (x *RegistrationAck) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RegistrationAck) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RegistrationAck) GetAssignedId() string {
	if x != nil {
		return x.AssignedId
	}
	return ""
}

// Acknowledge Metrics Received
type MetricsAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TotalMetrics  int64                  `protobuf:"varint,1,opt,name=total_metrics,json=totalMetrics,proto3" json:"total_metrics,omitempty"` // Total amount of metric received
	Status        string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`                                  // "healthy", "behind", "error"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MetricsAck) Reset() {
	*x = MetricsAck{}
	mi := &file_metrics_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricsAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsAck) ProtoMessage() {}

func (x *MetricsAck) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsAck.ProtoReflect.Descriptor instead.
func (*MetricsAck) Descriptor() ([]byte, []int) {
	return file_metrics_proto_rawDescGZIP(), []int{3}
}

func (x *MetricsAck) GetTotalMetrics() int64 {
	if x != nil {
		return x.TotalMetrics
	}
	return 0
}

func (x *MetricsAck) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

var File_metrics_proto protoreflect.FileDescriptor

const file_metrics_proto_rawDesc = "" +
	"\n" +
	"\rmetrics.proto\x12\rstartupmonkey\"\x8e\x02\n" +
	"\fDatabaseInfo\x12\x1f\n" +
	"\vdatabase_id\x18\x01 \x01(\tR\n" +
	"databaseId\x12#\n" +
	"\rdatabase_name\x18\x02 \x01(\tR\fdatabaseName\x12#\n" +
	"\rdatabase_type\x18\x03 \x01(\tR\fdatabaseType\x12\x18\n" +
	"\aversion\x18\x04 \x01(\tR\aversion\x12\x12\n" +
	"\x04host\x18\x05 \x01(\tR\x04host\x12'\n" +
	"\x0fmax_connections\x18\n" +
	" \x01(\x05R\x0emaxConnections\x12<\n" +
	"\x1aconnection_pooling_enabled\x18\v \x01(\bR\x18connectionPoolingEnabled\"\xbd\b\n" +
	"\x0fMetricsSnapshot\x12\x1f\n" +
	"\vdatabase_id\x18\x01 \x01(\tR\n" +
	"databaseId\x12\x1c\n" +
	"\ttimestamp\x18\x02 \x01(\x03R\ttimestamp\x12#\n" +
	"\rdatabase_type\x18\x03 \x01(\tR\fdatabaseType\x12\x1f\n" +
	"\vcpu_percent\x18\n" +
	" \x01(\x01R\n" +
	"cpuPercent\x12%\n" +
	"\x0ememory_percent\x18\v \x01(\x01R\rmemoryPercent\x123\n" +
	"\x17disk_io_read_mb_per_sec\x18\f \x01(\x01R\x12diskIoReadMbPerSec\x125\n" +
	"\x18disk_io_write_mb_per_sec\x18\r \x01(\x01R\x13diskIoWriteMbPerSec\x12-\n" +
	"\x12active_connections\x18\x14 \x01(\x05R\x11activeConnections\x12)\n" +
	"\x10idle_connections\x18\x15 \x01(\x05R\x0fidleConnections\x12'\n" +
	"\x0fmax_connections\x18\x16 \x01(\x05R\x0emaxConnections\x125\n" +
	"\x17connection_wait_time_ms\x18\x17 \x01(\x01R\x14connectionWaitTimeMs\x12/\n" +
	"\x14query_latency_p50_ms\x18\x1e \x01(\x01R\x11queryLatencyP50Ms\x12/\n" +
	"\x14query_latency_p95_ms\x18\x1f \x01(\x01R\x11queryLatencyP95Ms\x12/\n" +
	"\x14query_latency_p99_ms\x18  \x01(\x01R\x11queryLatencyP99Ms\x12,\n" +
	"\x12queries_per_second\x18! \x01(\x01R\x10queriesPerSecond\x12$\n" +
	"\x0ecache_hit_rate\x18( \x01(\x01R\fcacheHitRate\x12\"\n" +
	"\rcache_size_mb\x18) \x01(\x01R\vcacheSizeMb\x12*\n" +
	"\x11errors_per_second\x182 \x01(\x01R\x0ferrorsPerSecond\x12^\n" +
	"\x10extended_metrics\x18< \x03(\v23.startupmonkey.MetricsSnapshot.ExtendedMetricsEntryR\x0fextendedMetrics\x12B\n" +
	"\x06labels\x18= \x03(\v2*.startupmonkey.MetricsSnapshot.LabelsEntryR\x06labels\x1aB\n" +
	"\x14ExtendedMetricsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x01R\x05value:\x028\x01\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"f\n" +
	"\x0fRegistrationAck\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x1f\n" +
	"\vassigned_id\x18\x03 \x01(\tR\n" +
	"assignedId\"I\n" +
	"\n" +
	"MetricsAck\x12#\n" +
	"\rtotal_metrics\x18\x01 \x01(\x03R\ftotalMetrics\x12\x16\n" +
	"\x06status\x18\x02 \x01(\tR\x06status2\xaf\x01\n" +
	"\x0eMetricsService\x12O\n" +
	"\x10RegisterDatabase\x12\x1b.startupmonkey.DatabaseInfo\x1a\x1e.startupmonkey.RegistrationAck\x12L\n" +
	"\rStreamMetrics\x12\x1e.startupmonkey.MetricsSnapshot\x1a\x19.startupmonkey.MetricsAck(\x01B3Z1github.com/EricMurray-e-m-dev/startupmonkey/protob\x06proto3"

var (
	file_metrics_proto_rawDescOnce sync.Once
	file_metrics_proto_rawDescData []byte
)

func file_metrics_proto_rawDescGZIP() []byte {
	file_metrics_proto_rawDescOnce.Do(func() {
		file_metrics_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_metrics_proto_rawDesc), len(file_metrics_proto_rawDesc)))
	})
	return file_metrics_proto_rawDescData
}

var file_metrics_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_metrics_proto_goTypes = []any{
	(*DatabaseInfo)(nil),    // 0: startupmonkey.DatabaseInfo
	(*MetricsSnapshot)(nil), // 1: startupmonkey.MetricsSnapshot
	(*RegistrationAck)(nil), // 2: startupmonkey.RegistrationAck
	(*MetricsAck)(nil),      // 3: startupmonkey.MetricsAck
	nil,                     // 4: startupmonkey.MetricsSnapshot.ExtendedMetricsEntry
	nil,                     // 5: startupmonkey.MetricsSnapshot.LabelsEntry
}
var file_metrics_proto_depIdxs = []int32{
	4, // 0: startupmonkey.MetricsSnapshot.extended_metrics:type_name -> startupmonkey.MetricsSnapshot.ExtendedMetricsEntry
	5, // 1: startupmonkey.MetricsSnapshot.labels:type_name -> startupmonkey.MetricsSnapshot.LabelsEntry
	0, // 2: startupmonkey.MetricsService.RegisterDatabase:input_type -> startupmonkey.DatabaseInfo
	1, // 3: startupmonkey.MetricsService.StreamMetrics:input_type -> startupmonkey.MetricsSnapshot
	2, // 4: startupmonkey.MetricsService.RegisterDatabase:output_type -> startupmonkey.RegistrationAck
	3, // 5: startupmonkey.MetricsService.StreamMetrics:output_type -> startupmonkey.MetricsAck
	4, // [4:6] is the sub-list for method output_type
	2, // [2:4] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_metrics_proto_init() }
func file_metrics_proto_init() {
	if File_metrics_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_metrics_proto_rawDesc), len(file_metrics_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_metrics_proto_goTypes,
		DependencyIndexes: file_metrics_proto_depIdxs,
		MessageInfos:      file_metrics_proto_msgTypes,
	}.Build()
	File_metrics_proto = out.File
	file_metrics_proto_goTypes = nil
	file_metrics_proto_depIdxs = nil
}
