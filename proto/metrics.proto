syntax = "proto3";

package proto;

option go_package = "github.com/EricMurray-e-m-dev/StartupMonkey/proto";

// MetricsService handles metric collection and database registration
service MetricsService {
    // Collector registers database when it starts
    rpc RegisterDatabase (DatabaseInfo) returns (RegistrationAck);
    
    // Collector streams metrics continuously
    rpc StreamMetrics (stream MetricSnapshot) returns (MetricsAck);
}

// DatabaseInfo contains metadata about the database
message DatabaseInfo {
    // Database Identity
    string database_id = 1;
    string database_name = 2;
    string database_type = 3;
    string version = 4;
    string host = 5;
    
    // Config
    int32 max_connections = 10;
    bool connection_pooling_enabled = 11;
}

// MetricSnapshot is the normalized metric data sent to Analyser
// Contains health scores (0.0-1.0) and raw measurements
message MetricSnapshot {
    // === Metadata ===
    string database_id = 1;
    string database_type = 2;
    int64 timestamp = 3;

    // === Normalized Health Scores (0.0 - 1.0) ===
    double health_score = 10;
    double connection_health = 11;
    double query_health = 12;
    double storage_health = 13;
    double cache_health = 14;

    // === Context ===
    repeated string available_metrics = 20;

    // === Raw Measurements (for Analyser to inspect) ===
    Measurements measurements = 30;

    // === Optional: Pass-through ===
    map<string, double> extended_metrics = 40;
}

// Measurements contains raw values for Analyser to detect anomalies
message Measurements {
    // Connections
    optional int32 active_connections = 1;
    optional int32 idle_connections = 2;
    optional int32 max_connections = 3;
    optional int32 waiting_connections = 4;
    
    // Queries
    optional double avg_query_latency_ms = 10;
    optional double p50_query_latency_ms = 11;
    optional double p95_query_latency_ms = 12;
    optional double p99_query_latency_ms = 13;
    optional int32 slow_query_count = 14;
    optional int32 sequential_scans = 15;
    
    // Storage
    optional int64 used_storage_bytes = 20;
    optional int64 total_storage_bytes = 21;
    optional int64 free_storage_bytes = 22;
    
    // Cache
    optional double cache_hit_rate = 30;
    optional int64 cache_hit_count = 31;
    optional int64 cache_miss_count = 32;
}

// Acknowledge database registration
message RegistrationAck {
    bool success = 1;
    string message = 2;
    string assigned_id = 3;
}

// Acknowledge metrics received
message MetricsAck {
    int64 total_metrics = 1;
    string status = 2;
}